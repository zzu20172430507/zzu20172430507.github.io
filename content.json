{"meta":{"title":"BUAA LH's BLoG","subtitle":"welcome to my blog","description":"","author":"EURA","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"pic test","slug":"pic-test","date":"2022-03-07T15:49:08.000Z","updated":"2022-03-07T15:49:31.306Z","comments":true,"path":"posts/61c6b42f/","link":"","permalink":"http://example.com/posts/61c6b42f/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Pytorch Autograd:自动微分","slug":"Pytorch-Autograd-自动微分","date":"2022-03-07T15:29:46.000Z","updated":"2022-03-07T15:46:04.135Z","comments":true,"path":"posts/bf5a0143/","link":"","permalink":"http://example.com/posts/bf5a0143/","excerpt":"","text":"#####深度学习算法的本质是反向传播求导数，Pytorch作为目前比较好用的动态图求导框架，通过动态建立计算图来进行求导过程 Pytorch中的Autograd模块实现了该功能。在Tensor上的所有操作，Autograd都能为他们自动提供微分，避免手动计算的复杂过程。 autograd.Variable 是 Autograd中的核心类。是Tensor的一种封装，并支持Tensor的所有操作。 Tensor封装为 autograd.Variable 后可以通过 .backward 来实现反向传播，自动计算所有梯度","categories":[],"tags":[{"name":"Pytorch 深度学习框架Pytorch入门与实践","slug":"Pytorch-深度学习框架Pytorch入门与实践","permalink":"http://example.com/tags/Pytorch-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6Pytorch%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5/"}]},{"title":"from __future__ import print_function用法","slug":"from-future-import-print-function用法","date":"2022-03-07T15:06:31.000Z","updated":"2022-03-07T15:13:53.726Z","comments":true,"path":"posts/6472aa38/","link":"","permalink":"http://example.com/posts/6472aa38/","excerpt":"","text":"在阅读《深度学习框架Pytorch入门与实践》第二章时，源码中出现了 1from __future__ import print_function 这是 **python2 ** 的语句，在python2中如果想超前使用python3的print函数，那么需要添加这一句 例如： 123from __future__ import print_functionprint(&#x27;hello world&#x27;)print &#x27;hello world&#x27; 在python2的版本中使用了上述的语句，则第二句的语法检查通过，第三句的语法检查不通过。 可参考链接 知乎 from future import print_function用法","categories":[],"tags":[{"name":"pytorch","slug":"pytorch","permalink":"http://example.com/tags/pytorch/"}]},{"title":"Markdown使用技巧","slug":"Markdown使用技巧","date":"2022-02-16T10:34:55.000Z","updated":"2022-02-16T10:51:07.855Z","comments":true,"path":"posts/115f9f7/","link":"","permalink":"http://example.com/posts/115f9f7/","excerpt":"","text":"MarkDown基础基础篇视频讲解链接画图篇视频讲解链接 标题1# 标题名字（井号的个数代表标题的级数） 一级标题使用1个#二级标题使用2个#三级标题使用3个#四级标题使4用个#五级标题使用5个#六级标题使用6个######## 最多支持六级标题# 文字删除线1这就是 ~~删除线~~ (使用波浪号) 这就是 删除线 (使用波浪号) 斜体1这是用来 *斜体* 的 _文本_ 这是用来 斜体 的 文本 加粗1这是用来 **加粗** 的 __文本__ 这是用来 加粗 的 文本 斜体+加粗1这是用来 ***斜体+加粗*** 的 ___文本___ 这是用来 斜体+加粗 的 文本 下划线下划线是HTML语法 下划线 下划线(快捷键command+u，视频中所有的快捷键都是针对Mac系统，其他系统可自行查找) 高亮（需勾选扩展语法）1这是用来 ==斜体+加粗== 的文本 这是用来 &#x3D;&#x3D;斜体+加粗&#x3D;&#x3D; 的文本 下标（需勾选扩展语法）12水 H~2~O 双氧水 H~2~O~2~ 水 H2O 双氧水 H2O2 上标（需勾选扩展语法）12面积 m^2^ 体积 m^3^ 面积 m^2^体积 m^3^ 表情符号 Emoji 支持表情符号，你可以用系统默认的 Emoji 符号（ Windows 用户不一定支持，自己试下~）。 也可以用图片的表情，输入 : 将会出现智能提示。 一些表情例子1234:smile: :laughing: :dizzy_face: :sob: :cold_sweat: :sweat_smile: :cry: :triumph: :heart_eyes: :relaxed: :sunglasses: :weary::+1: :-1: :100: :clap: :bell: :gift: :question: :bomb: :heart: :coffee: :cyclone: :bow: :kiss: :pray: :sweat_drops: :hankey: :exclamation: :anger: :smile: :laughing: :dizzy_face: :sob: :cold_sweat: :sweat_smile: :cry: :triumph: :heart_eyes: :relaxed: :sunglasses: :weary: :+1: :-1: :100: :clap: :bell: :gift: :question: :bomb: :heart: :coffee: :cyclone: :bow: :kiss: :pray: :sweat_drops: :hankey: :exclamation: :anger: ( Mac: control+command+space点选) 表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行： 1234name | price--- | ---fried chicken | 19cola|5 为了使 Markdown 更清晰，| 和 - 两侧需要至少有一个空格（最左侧和最右侧的 | 外就不需要了）。 name price fried chicken 19 cola 5 为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 | 来标记单元格边界，在表头下方的分隔线标记中加入 :，即可标记下方单元格内容的对齐方式： 1234| name | price || :------------ | :---: || fried chicken | 19 || cola | 32 | name price fried chicken 19 cola 32 使用快捷键command+opt+T更方便(段落→表格→插入表格，即可查看快捷键) 引用1&gt;“后悔创业” “后悔创业” 12&gt;也可以在引用中&gt;&gt;使用嵌套的引用 也可以在引用中 使用嵌套的引用 列表无序列表–符号 空格123* 可以使用 `*` 作为标记+ 也可以使用 `+`- 或者 `-` 可以使用 * 作为标记 也可以使用 + 或者 - 有序列表–数字 . 空格1231. 有序列表以数字和 `.` 开始；3. 数字的序列并不会影响生成的列表序列；4. 但仍然推荐按照自然顺序（1.2.3...）编写。 有序列表以数字和 . 开始； 数字的序列并不会影响生成的列表序列； 但仍然推荐按照自然顺序（1.2.3…）编写。 1可以使用：数字\\. 来取消显示为列表（用反斜杠进行转义） 代码代码块1```语言名称 12public static void main(String[] args) &#123; &#125; 行内代码123也可以通过 ``，插入行内代码（` 是 `Tab` 键上边、数字 `1` 键左侧的那个按键）：例如 `Markdown` Markdown 转换规则代码块中的文本（包括 Markdown 语法）都会显示为原始内容 分隔线可以在一行中使用三个或更多的 *、- 或 _ 来添加分隔线（&#96;&#96;）： 123***------___ 跳转外部跳转–超链接格式为 [link text](link)。 1[帮助文档](https://support.typora.io/Links/#faq) 帮助文档 内部跳转–本文件内跳（Typora支持）格式为 [link text](#要去的目的地--标题）。 1[我想跳转](#饼图（Pie）) Open Links in Typora You can use command+click (macOS), or ctrl+click (Linux&#x2F;Windows) on links in Typora to jump to target headings, or open them in Typora, or open in related apps. 我想跳转 自动链接使用 &lt;&gt; 包括的 URL 或邮箱地址会被自动转换为超链接： 123&lt;https://www.baidu.com&gt;&lt;123@email.com&gt; https://www.baidu.com 123@email.com 图片1![自己起的图片名字](图片地址或者图片本地存储的路径) 网上的图片1![friedChicken](https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1580814517&amp;di=2630beac440e5dab0e44c7286a3b2b61&amp;src=http://imgsrc.baidu.com/forum/w=580/sign=12c730c4ff03738dde4a0c2a831ab073/9497794f9258d1091818e6d6d858ccbf6d814d1b.jpg) 本地图片123![friedChicken](friedChicken.jpg)在同一个文件夹里（用相对路径）或者直接拷贝 利用Markdown画图（需勾选扩展语法） markdown画图也是轻量级的，功能并不全。 Mermaid 是一个用于画流程图、状态图、时序图、甘特图的库，使用 JS 进行本地渲染，广泛集成于许多 Markdown 编辑器中。Mermaid 作为一个使用 JS 渲染的库，生成的不是一个“图片”，而是一段 HTML 代码。 （不同的编辑器渲染的可能不一样） 流程图(graph)概述12graph 方向描述 图表中的其他语句... 关键字graph表示一个流程图的开始，同时需要指定该图的方向。 其中“方向描述”为： 用词 含义 TB 从上到下 BT 从下到上 RL 从右到左 LR 从左到右 T &#x3D; TOP，B &#x3D; BOTTOM，L &#x3D; LEFT，R &#x3D; RIGHT，D &#x3D; DOWN 最常用的布局方向是TB、LR。 12345graph TB; A--&gt;B B--&gt;C C--&gt;A 1234graph TB; A--&gt;B B--&gt;C C--&gt;A 1234graph LR; A--&gt;B B--&gt;C C--&gt;A 1234graph LR; A--&gt;B B--&gt;C C--&gt;A 流程图常用符号及含义节点形状 表述 说明 含义 id[文字] 矩形节点 表示过程，也就是整个流程中的一个环节 id(文字) 圆角矩形节点 表示开始和结束 id((文字)) 圆形节点 表示连接。为避免流程过长或有交叉，可将流程切开。成对 id{文字} 菱形节点 表示判断、决策 id&gt;文字] 右向旗帜状节点 单向箭头线段：表示流程进行方向 id即为节点的唯一标识，A~F 是当前节点名字，类似于变量名，画图时便于引用 括号内是节点中要显示的文字，默认节点的名字和显示的文字都为A 1234567graph TB A B(圆角矩形节点) C[矩形节点] D((圆形节点)) E&#123;菱形节点&#125; F&gt;右向旗帜状节点] 12345678graph TB A B(圆角矩形节点) C[矩形节点] D((圆形节点)) E&#123;菱形节点&#125; F&gt;右向旗帜状节点] 123456graph TB begin(出门)--&gt; buy[买炸鸡] buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125; IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家) IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack 123456graph TB begin(出门)--&gt; buy[买炸鸡] buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125; IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家) IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack 连线12345678910111213graph TB A1--&gt;B1 A2---B2 A3--text---B3 A4--text--&gt;B4 A5-.-B5 A6-.-&gt;B6 A7-.text.-B7 A8-.text.-&gt;B8 A9===B9 A10==&gt;B10 A11==text===B11 A12==text==&gt;B12 12345678910111213graph TB A1--&gt;B1 A2---B2 A3--text---B3 A4--text--&gt;B4 A5-.-B5 A6-.-&gt;B6 A7-.text.-B7 A8-.text.-&gt;B8 A9===B9 A10==&gt;B10 A11==text===B11 A12==text==&gt;B12 12graph TB A ---B 子图表使用以下语法添加子图表 123subgraph 子图表名称 子图表中的描述语句...end 1234567graph TB subgraph 买炸鸡前 begin(出门)--&gt; buy[出门买炸鸡] end buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125; IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家) IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack 1234567graph TB subgraph 买炸鸡前 begin(出门)--&gt; buy[出门买炸鸡] end buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125; IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家) IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack 序列图(sequence diagram)概述123sequenceDiagram [参与者1][消息线][参与者2]:消息体 ... sequenceDiagram 为每幅时序图的固定开头 123456sequenceDiagram Title: 买炸鸡 救救-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？ 炸鸡店小哥--&gt;&gt;救救: 没有，要现炸 12345sequenceDiagram Title: 买炸鸡 救救-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？ 炸鸡店小哥--&gt;&gt;救救: 没有，要现炸 参与者（participant）传统时序图概念中参与者有角色和类对象之分，但这里我们不做此区分，用参与者表示一切参与交互的事物，可以是人、类对象、系统等形式。中间竖直的线段从上至下表示时间的流逝。 12345sequenceDiagram participant 参与者 1 participant 参与者 2 ... participant 简称 as 参与者 3 #该语法可以在接下来的描述中使用简称来代替参与者 3 participant &lt;参与者名称&gt; 声明参与者，语句次序即为参与者横向排列次序。 消息线 类型 描述 -&gt; 无箭头的实线 –&gt; 无箭头的虚线 -&gt;&gt; 有箭头的实线（主动发出消息） –-&gt;&gt; 有箭头的虚线（响应） -x 末端为叉的实线（表示异步） –x 末端为叉的虚线（表示异步） 处理中-激活框从消息接收方的时间线上标记一小段时间，表示对消息进行处理的时间间隔。 在消息线末尾增加 + ，则消息接收者进入当前消息的“处理中”状态；在消息线末尾增加 - ，则消息接收者离开当前消息的“处理中”状态。 1234567sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; 99: 没有，要现炸。 99 -x +seller:给我炸！ seller --&gt;&gt; -99: 您的炸鸡好了！ 12345678sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; 99: 没有，要现炸。 99 -x +seller:给我炸！ seller --&gt;&gt; -99: 您的炸鸡好了！ 注解（note）语法如下 1Note 位置表述 参与者: 标注文字 其中位置表述可以为 表述 含义 right of 右侧 left of 左侧 over 在当中，可以横跨多个参与者 123456789101112sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 Note over 99,seller : 热爱炸鸡 Note left of 99 : 女 Note right of seller : 男 99 -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; 99: 没有，要现炸。 99 -x +seller : 给我炸！ seller --&gt;&gt; -99: 您的炸鸡好了！ 1234567891011sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 Note over 99,seller : 热爱炸鸡 Note left of 99 : 女 Note right of seller : 男 99 -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; 99: 没有，要现炸。 99 -x +seller : 给我炸！ seller --&gt;&gt; -99: 您的炸鸡好了！ 循环（loop）在条件满足时，重复发出消息序列。（相当于编程语言中的 while 语句。） 123456789101112sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; 99: 没有，要现炸。 99 -&gt;&gt; +seller:给我炸！ loop 三分钟一次 99 -&gt;&gt; seller : 我的炸鸡好了吗？ seller --&gt;&gt; 99 : 正在炸 end seller --&gt;&gt; -99: 您的炸鸡好了！ 123456789101112sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; 99: 没有，要现炸。 99 -&gt;&gt; +seller:给我炸！ loop 三分钟一次 99 -&gt;&gt; seller : 我的炸鸡好了吗？ seller --&gt;&gt; 99 : 正在炸 end seller --&gt;&gt; -99: 您的炸鸡好了！ 选择（alt）在多个条件中作出判断，每个条件将对应不同的消息序列。（相当于 if 及 else if 语句。） 123456789101112131415sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller : 现在就多少只炸好的炸鸡？ seller --&gt;&gt; 99 : 可卖的炸鸡数 alt 可卖的炸鸡数 &gt; 3 99 -&gt;&gt; seller : 买三只！ else 1 &lt; 可卖的炸鸡数 &lt; 3 99 -&gt;&gt; seller : 有多少买多少 else 可卖的炸鸡数 &lt; 1 99 -&gt;&gt; seller : 那我明天再来 end seller --&gt;&gt; 99 : 欢迎下次光临 123456789101112131415sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller : 现在就多少只炸好的炸鸡？ seller --&gt;&gt; 99 : 可卖的炸鸡数 alt 可卖的炸鸡数 &gt; 3 99 -&gt;&gt; seller : 买三只！ else 1 &lt; 可卖的炸鸡数 &lt; 3 99 -&gt;&gt; seller : 有多少买多少 else 可卖的炸鸡数 &lt; 1 99 -&gt;&gt; seller : 那我明天再来 end seller --&gt;&gt; 99 : 欢迎下次光临 可选（opt）在某条件满足时执行消息序列，否则不执行。相当于单个分支的 if 语句。 1234567sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller : 买炸鸡 opt 全都卖完了 seller --&gt;&gt; 99 : 下次再来 end 1234567sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller : 买炸鸡 opt 全都卖完了 seller --&gt;&gt; 99 : 下次再来 end 并行（Par）将消息序列分成多个片段，这些片段并行执行。 12345678910111213sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller : 一个炸鸡，一杯可乐！ par 并行执行 seller -&gt;&gt; seller : 装可乐 and seller -&gt;&gt; seller : 炸炸鸡 end seller --&gt;&gt; 99 : 您的炸鸡好了！ 12345678910111213sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller : 一个炸鸡，一杯可乐！ par 并行执行 seller -&gt;&gt; seller : 装可乐 and seller -&gt;&gt; seller : 炸炸鸡 end seller --&gt;&gt; 99 : 您的炸鸡好了！ 饼图（Pie）12345pie title Pie Chart &quot;Dogs&quot; : 386 &quot;Cats&quot; : 85 &quot;Rats&quot; : 150 123456pie title Pie Chart &quot;Dogs&quot; : 386 &quot;Cats&quot; : 85 &quot;Rats&quot; : 150 &quot;panda&quot; : 200 Typora支持mermaid的官方链接 甘特图（gantt）12345678910 title 标题dateFormat 日期格式section 部分名任务名:参数一, 参数二, 参数三, 参数四，参数五 //参数一：crit（是否重要，红框框） 或者 不填 //参数二：done（已完成）、active（正在进行） 或者 不填(表示为待完成状态) //参数三：取小名 或者 不填 //参数四：任务开始时间 //参数五：任务结束时间 官方教程 123456789101112131415161718192021222324252627gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h 12345678910111213141516171819202122232425262728gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"}]},{"title":"CFL实验记录-2022-02-10","slug":"CFL实验记录-2022-02-10","date":"2022-02-10T07:45:47.000Z","updated":"2022-02-11T10:00:19.802Z","comments":true,"path":"posts/148bd129/","link":"","permalink":"http://example.com/posts/148bd129/","excerpt":"","text":"【实验记录1】实验报错记录：stderr中报错 “No such file or directory” ，基本判断为路径不正确，问题出在我之前挂载点是184节点，现在挂载的是186节点，186节点应该使用cd: &#x2F;mnt&#x2F;nfs-storage2&#x2F; 的路径 【实验记录2】在增加客户端数量后（20个客户端分为了两簇），使用原来的CFL参数进行训练分簇，总体分成2簇，但实际上会分成多个簇 分析原因：训练波动导致多次进行了分簇，其中序号出现了重复是由于分簇后下标重新进行了划分，这个是CFL代码的问题，需要进行修改。 100个客户端，前50个客户端的图像进行了反转 6(JOEE9.png)","categories":[],"tags":[{"name":"实验记录","slug":"实验记录","permalink":"http://example.com/tags/%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-02-09T13:08:56.978Z","updated":"2022-02-07T13:50:16.211Z","comments":true,"path":"posts/4a17b156/","link":"","permalink":"http://example.com/posts/4a17b156/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"聚类性能度量之Jaccard系数","slug":"聚类性能度量之Jaccard系数","date":"2022-02-07T08:36:50.000Z","updated":"2022-02-16T14:20:08.832Z","comments":true,"path":"posts/196c5604/","link":"","permalink":"http://example.com/posts/196c5604/","excerpt":"","text":"聚类性能度量分为两个大类： 聚类结果与参考模型比较，称为外部指标。 聚类结果直接考察，不参考外部模型，称为内部指标。 ####本文主要记录外部指标中的Jaccard系数 Jaccard 系数是外部指标的一种。对于数据集D &#x3D; {x1,x2,…xm}，假定得到的聚类结果是C &#x3D;{C1,C2,…Ck}, 而参考模型给出的聚类结果是C* &#x3D; {C1*,C2*…Cs*}。相应的令lamda和lamda表示C与C的对应的簇标记向量。将样本两两配对考虑，","categories":[],"tags":[{"name":"聚类","slug":"聚类","permalink":"http://example.com/tags/%E8%81%9A%E7%B1%BB/"}]}],"categories":[],"tags":[{"name":"Pytorch 深度学习框架Pytorch入门与实践","slug":"Pytorch-深度学习框架Pytorch入门与实践","permalink":"http://example.com/tags/Pytorch-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6Pytorch%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5/"},{"name":"pytorch","slug":"pytorch","permalink":"http://example.com/tags/pytorch/"},{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"},{"name":"实验记录","slug":"实验记录","permalink":"http://example.com/tags/%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/"},{"name":"聚类","slug":"聚类","permalink":"http://example.com/tags/%E8%81%9A%E7%B1%BB/"}]}